<?php

namespace App\Models;

use App\Enums\PurchaseType;
use App\Enums\TransactionType;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Laravel\Scout\Searchable;
use Ramsey\Uuid\Type\Integer;

class Book extends Model
{
    use HasFactory, Searchable, SoftDeletes;

    protected $guarded = [
        'balance',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    public function transactions(): HasMany
    {
        return $this->hasMany(Transaction::class);
    }

    public function supplier(): BelongsTo
    {
        return $this->belongsTo(Supplier::class);
    }

    public function logs(): MorphMany
    {
        return $this->morphMany(Log::class, 'loggable');
    }

    public function settlements(): HasMany
    {
        return $this->hasMany(ConsignmentSettlement::class);
    }

    public function settled(): int
    {
        if (PurchaseType::from($this['type']) === PurchaseType::CONSIGNMENT) {
            return $this['settlements']->pluck('quantity')->sum();
        }

        return -1;
    }

    public function max_payable(): int|null
    {
        if (PurchaseType::from($this['type']) === PurchaseType::CONSIGNMENT) {
            return $this['balance'] + $this->payable();
        }

        return null;
    }

    public function max_returnable(): int|null
    {
        if (PurchaseType::from($this['type']) === PurchaseType::CONSIGNMENT) {
            return $this['balance'] + min($this->payable(), 0);
        }

        return null;
    }

    public function payable(): int|null
    {
        if (PurchaseType::from($this['type']) === PurchaseType::CONSIGNMENT) {
            return $this['transactions']->where(
                'type', TransactionType::SALE
            )->sum(function ($transaction) {
                return $transaction->quantity;
            }) - $this->settled();
        }

        return null;
    }

    public function toSearchableArray(): array
    {
        return [
            'id' => (int) $this->id,
            'code' => $this->code,
            'title' => $this->title,
            'alternate_title' => $this->alternate_title,
            'author' => $this->author,
            'category' => $this->category,
            'type' => (string) $this->type,
            'balance' => (int) $this->balance,
            'created_at' => (int) $this->created_at,
            'updated_at' => $this->updated_at,
            'deleted_at' => $this->deleted_at,
        ];
    }

    // Override the default date format
    public function getDateFormat(): string
    {
        return 'U';
    }

    protected $casts = [
        'created_at' => 'integer',
        'updated_at' => 'integer',
    ];

    public function toArray(): array
    {
        return array_merge(
            parent::toArray(),
            [
                'created_at' => (int) $this->created_at,
                'updated_at' => (int) $this->updated_at,
                'deleted_at' => (int) $this->deleted_at,
            ]
        ); // TODO: Change the autogenerated stub
    }
}
